openapi: "3.0.0"
info:
  version: 1.0.0
  title: Tipen Swagger
  description: A sample API that uses a petstore as an example to demonstrate features in the OpenAPI 3.0 specification
  termsOfService: http://swagger.io/terms/
  contact:
    name: Swagger API Team
    email: apiteam@swagger.io
    url: http://swagger.io
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
servers:
  - url: https://petstore.swagger.io/v2
paths:
  /register:
    # post:
    #   description: This is endpoint to register user
    #   operationId: registerUser
    #   responses:
    #     '200':
    #       description: register user response
    #       content:
    #         application/json:
    #           schema:
    #             type: array
    #             items:
    #               $ref: '#/components/schemas/Pet'
    #     default:
    #       description: unexpected error
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/Error'
    post:
      description: This is endpoint to register user
      operationId: registerUser
      requestBody:
        description: User to add
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUser'
      responses:
        '200':
          description: register user response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegisterUserSuccess'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  # /pets/{id}:
  #   get:
  #     description: Returns a user based on a single ID, if the user does not have access to the pet
  #     operationId: find pet by id
  #     parameters:
  #       - name: id
  #         in: path
  #         description: ID of pet to fetch
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       '200':
  #         description: pet response
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Pet'
  #       default:
  #         description: unexpected error
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Error'
  #   delete:
  #     description: deletes a single pet based on the ID supplied
  #     operationId: deletePet
  #     parameters:
  #       - name: id
  #         in: path
  #         description: ID of pet to delete
  #         required: true
  #         schema:
  #           type: integer
  #           format: int64
  #     responses:
  #       '204':
  #         description: pet deleted
  #       default:
  #         description: unexpected error
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Error'
components:
  schemas:
    # Pet:
    #   allOf:
    #     - $ref: '#/components/schemas/NewPet'
    #     - type: object
    #       required:
    #       - id
    #       properties:
    #         id:
    #           type: integer
    #           format: int64
    RegisterUser:
      type: object
      required:
        - firstname
        - lastname
        - password
        - email
      properties:
        firstname:
          type: string
        lastname:
          type: string
        password:
          type: string
        email:
          type: string
    RegisterUserSuccess:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string